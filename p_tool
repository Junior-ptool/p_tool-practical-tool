#!/bin/bash

#Script for practical automated usage 
#Author: Junior Egbuna
#Use at own risk. Although every effort has been made to ensure the sript is error free, there may be a few issues on certain systems and a recode may be needed to get the script working as expected.
clear
#This Script has been mainly tested on CentOS and RedHat Distributions.
#Please send update suggestions to junior@ptools.co.uk or take part in the development at https://github.com/junior/p_tool-practical-tool

echo -e "$(tput setaf 4)# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## #"
echo -e "$(tput setaf 4)#                     $(tput setaf 2)Practical Tool$(tput sgr 0)                       $(tput setaf 4)#"
echo -e "$(tput setaf 4)#                         $(tput setaf 2)v1.01$(tput sgr 0)                            $(tput setaf 4)#"
echo -e "$(tput setaf 4)#   $(tput setaf 2)https://github.com/Junior-ptool/p_tool-practical-tool  $(tput setaf 4)#"
echo -e "$(tput setaf 4)# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## #$(tput sgr 0)"

#Create directory for use by ptool
function exist_mkdir () {
sudo ls /etc/ptool
}
echo
echo
echo
if "exist_mkdir" ; then
	echo "Directory already exist. Moving on with selection.."
else
	sudo mkdir /etc/ptool
fi
echo
echo
echo
echo "What would you like to do with Practical Tool?"
echo 
echo 
echo "Create User. Manage Permissions: [a]"
echo
echo "Basic Server Set-Up: [s] "
echo
echo "Partition And RAID Storage Devices: [p] "
echo
echo "Update Services And Packages:  [u] "
echo
echo "Configure swap, swappiness and max kernel max message:  [m]"
echo
echo "Exit:  [x]"
echo 
echo "Please select a letter corresponding to your selection:   "
echo 
echo "$(tput setaf 3)[s] : Initial Server Set Up. Very Basic.$(tput sgr 0)  "
echo "$(tput setaf 3)[p] : Partition or Fallocate Drives & Create RAID.$(tput sgr 0)  "
echo "$(tput setaf 3)[a] : Add New User. Manage Permissions & Umask.$(tput sgr 0)  "
echo "$(tput setaf 3)[u] : Update Server.$(tput sgr 0)  "
echo "$(tput setaf 3)[m] : Create & Configure Swap, Swappiness & Kernel Message.$(tput sgr 0)  "
echo "$(tput setaf 3)[x] : Exit This Script.$(tput sgr 0)  "
echo
read -p "Enter Selection:   " action

#Menu Options
while [[ true != false ]] ; do
	case $action in	
		u) echo "Server Updating. Please Wait...";;
		p) echo "Initizializing Partitioning and RAID Script. Please Wait...";;
		s) echo "Initializing A Basic Initial Server Setup And Configuration";;
		m) echo "Configuring Swap Parameters...";;
		a) echo "Create New User/s & Update permissions and umask..";;
		x) echo "Now Exiting....."
	esac

#System Update
	if [[ $action == u ]] ; then
		
		echo "Which Distribution Is In use?   "
		echo
		echo "$(tput setaf 2)[1] : CentOS | RedHat | Fedora Distributions.$(tput sgr 0)  "
		echo "$(tput setaf 2)[2] : Debian | Ubuntu Distributions.$(tput sgr 0)  "
		echo 
		read -p "Enter Number:   "  i
		case $i in
			1) echo "CentOS/RedHat/Fedora";;
			2) echo "Debian/Ubuntu";;
		esac
		if [[ $i -eq 1 ]] ; then
			sudo dnf -y update
		elif [[ $i -eq 2 ]] ; then
			sudo apt -y update
		fi
		break

#Pull Partition scipt and run		
	elif [[ $action == p ]] ; then
		cd /etc/ptool
		function sh () {
		cat /etc/ptool/ptool-part
		}
		if sh ; then
			sudo bash ptool-part
		else
			sudo wget https://raw.githubusercontent.com/Junior-ptool/p_tool-practical-tool/master/ptool-part
                        sudo chmod 700 /etc/ptool/ptool-part
			sudo bash ptool-part
		fi
		

#Set Up Servers		
	elif [[ $action == s ]] ; then
		echo "Would you like to generate a ssh keypair and scan your additional nodes to collect their keys?  "
		read -p "[Y] or [N]:  " quest
		if [[ $quest == Y ]] || [[ $quest == y ]] ; then
			echo "Enter The Hostname Or IP.  "
			read host
			function ssh () {
			ls ~/.ssh
			}
			if ssh ; then
				echo ""
			else
				sudo mkdir ~/.ssh
				sudo mkdir ~/.ssh/known_hosts
				sudo chmod 600 ~/.ssh/known_hosts
			fi

#Copy keys from host
			sudo ssh-keyscan $host ~/.ssh/known_hosts
			sudo ssh-keygen -t rsa 
			sudo ssh-copy-id $host
			
			
		fi

#SSH Hardening
		echo "Would you like to reduce Brute Force Noise and change your SSH Port?  "
		echo 
		read -p "[Y] or [N]:   " ssh_port
		if [[ $ssh_port == Y ]] || [[ $ssh_port == y ]] ; then
			echo 
			echo "What Port Do You Want SSH To Respond To?   "
			echo
			read -p "Port Number:  " p_num
			echo
			echo Port $p_num >> /etc/ssh/sshd_config
			if [[ $? -eq 0 ]] ; then
				sudo systemctl restart sshd
				echo "SSH Port now updated. Please open a new shell and test it before closing this one."
			else
				echo "There has been an permission issue hardening your SSH. Are you root or a sudoer?  "
			fi
				
			echo 
			echo "What is the hostname for the server? "
			read -p "Pick Hostname:   " hostname
			sudo hostnamectl set-hostname $hostname
			echo 
			echo "What is your time zone? e.g Europe/London"
			read -p "Correct Syntax Needed:   " time
			sudo timedatectl set-timezone $time
			
		else
			echo "SSH Hardening And Basic Set Up has not taken place.  "
		fi
		break

function flag () {
swapon -s
}
declare -xf flag
#Optimise Server with swappiness and overcommit
	elif [[ $action == m ]] ; then
		echo 
		echo "What swappiness would you like to apply \(Max 100\)?  "
		read -p "Enter Figure:   " swap_level
		sudo sysctl vm.swappiness=$swap_level
		echo 
		echo "Would you like to overcommit memory?  "
		read -p "[Y] or [N]:  " oc

		if [[ $oc == Y ]] || [[ $oc == y ]] ; then
			echo 1 > /proc/sys/vm/overcommit_memory
		fi

		echo "What would you like to set msgmax to? \(Max: 131072\) "
		read -p "Enter Figure:   "
		sudo echo $REPLY > /proc/sys/kernel/msgmax
		echo
		echo "Would you like to create swap?  "
		read -p "[Y] [N]:  " fal_swap
		function flag2 () {
		swapon $swap
		}
		declare -xf flag2

#Create swap if wanted.
		if [[ $fal_swap == Y ]] || [[ $fal_swap == y ]] ; then
			echo
			echo "What size would you like your swap to be in MB or GB?  "
			echo
			read -p "Enter Figure:  " swap_size
			echo
			echo "Creating swap"
			echo
			swap=/etc/ptool/swap.disk
			sudo fallocate -l $swap_size $swap
			sudo chmod 600 $swap
			sudo mkswap $swap
			su -c flag2 
			su -c flag 
			echo
			free -h
			echo "Swap Successfully Created.  "
			echo
			echo "$swap	none	ext4	swap	defaults	0	0" >> /etc/fstab
			
		else
			echo
			echo "No Swap Will Be Added"
			echo
		fi

		break

#Add User And Password
	elif [[ $action == a ]] ; then
		function add () {
		sudo grep -e "^$user" /etc/passwd
		}
		while true ; do
			echo
			echo "What is the name of the user you would like to add?  "
			echo
			read -p "Username:   "user
			"add" > /dev/null

			#Check if user exist
			if add ; then
				echo "Username $user Already Exists! Please try again.  "
			else

				echo
				echo "Please enter the new users password.  "
				echo
				read -s -p "Enter Password:   " password
				pass=$(perl -e 'print crypt($ARGV[0], "password")' $password)
				sudo useradd -m -p "$pass" "$user"

				if [[ $? -eq 0 ]] ; then
					echo "User $user Has Been Successfully Added.  "
					break
				else
					echo "Failed To Add User.  "
				fi
			fi
		done

#Exit Script
	elif [[ $action == x ]] ; then
		break
		exit 1
		
	fi
done 
