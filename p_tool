#!/bin/bash

#Script for practical automated usage 
#Author: Junior Egbuna
#Use at own risk. Although every effort has been made to ensure the sript is error free, 
#there may be a few issues on certain systems and a recode may be needed to get the script working as expected.
clear
#This Script has been mainly tested on CentOS and RedHat Distributions.
#Please send update suggestions to junior@ptools.co.uk or take part in the development at https://github.com/junior/p_tool-practical-tool

echo -e "$(tput setaf 4)#$(tput sgr 0)$(tput setaf 6)#$(tput sgr 0)$(tput setaf 4)## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##$(tput sgr 0)$(tput setaf 6)#$(tput sgr 0)$(tput setaf 4)#"
echo -e "$(tput setaf 4)#                     $(tput setaf 2)Practical Tool$(tput sgr 0)                       $(tput setaf 4)#"
echo -e "$(tput setaf 4)#                         $(tput setaf 2)v1.01$(tput sgr 0)                            $(tput setaf 4)#"
echo -e "$(tput setaf 4)#   $(tput setaf 2)https://github.com/Junior-ptool/p_tool-practical-tool  $(tput setaf 4)#"
echo -e "$(tput setaf 4)#$(tput sgr 0)$(tput setaf 6)#$(tput sgr 0)$(tput setaf 4)## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##$(tput sgr 0)$(tput setaf 6)#$(tput sgr 0)$(tput setaf 4)#$(tput sgr 0)"

#Create directory for use by ptool
exist_mkdir () {
sudo ls /etc/ptool > /dev/null
}
echo
echo
echo
if "exist_mkdir" ; then
	echo "Ptool Working Directory already exist. Moving on...."
else
	sudo mkdir /etc/ptool
	echo "Ptool Working Directory Created.  "
fi
echo
echo
echo
echo "What would you like to do with Practical Tool?"
echo 
echo 
echo 
echo 
echo "Please select a letter corresponding to your selection:   "
echo 
echo "$(tput setaf 3)[S] : Initial Server Set Up. Very Basic.$(tput sgr 0)  "
echo "$(tput setaf 3)[P] : Partition or Fallocate Drives & Create RAID.$(tput sgr 0)  "
echo "$(tput setaf 3)[A] : Add New User. Manage Permissions.$(tput sgr 0)  "
echo "$(tput setaf 3)[U] : Update Server.$(tput sgr 0)  "
echo "$(tput setaf 3)[M] : Create & Configure Swap, Swappiness & Kernel Message.$(tput sgr 0)  "
echo "$(tput setaf 3)[F] : Configure and Manage Firewall And Settings.$(tput sgr 0)"
echo "$(tput setaf 3)[X] : Exit This Script.$(tput sgr 0)  "
echo
read -p "$(tput setaf 5)Enter Selection:$(tput sgr 0)   " action

#Menu Options
while [[ true != false ]] ; do
	case $action in	
		u) echo "Server Updating. Please Wait...";;
		p) echo "Initizializing Partitioning and RAID Script. Please Wait...";;
		s) echo "Initializing A Basic Initial Server Setup And Configuration";;
		m) echo "Configuring Swap Parameters...";;
		a) echo "Create New User/s & Update permissions..";;
		f) echo "Configuring Firewall.. ";;
		x) echo "Now Exiting.....";;
		*) echo "Invalid Option!!"
	esac


#Pull Firewall Script For Configuration
	if [[ $action == f ]] || [[ $action == F ]] ; then
		cd /etc/ptool
                fc () {
                ls /etc/ptool/ptool-firewall > /dev/null
                }
                if fc ; then
                        sudo bash ptool-firewall
                else
                        sudo wget https://raw.githubusercontent.com/Junior-ptool/p_tool-practical-tool/master/ptool-firewall
                        sudo chmod 700 /etc/ptool/ptool-firewall
                        sudo bash ptool-firewall
                fi
	fi
#System Update
	if [[ $action == u ]] || [[ $action == U ]]; then
		
		echo "Which Distribution Is In use?   "
		echo
		echo "$(tput setaf 2)[1] : CentOS | RedHat | Fedora Distributions.$(tput sgr 0)  "
		echo "$(tput setaf 2)[2] : Debian | Ubuntu Distributions.$(tput sgr 0)  "
		echo 
		read -p "Enter Number:   "  i
		case $i in
			1) echo "CentOS/RedHat/Fedora";;
			2) echo "Debian/Ubuntu";;
		esac
		if [[ $i -eq 1 ]] ; then
			sudo dnf -y update
		elif [[ $i -eq 2 ]] ; then
			sudo apt -y update
		fi
		echo
		echo "Update Complete.  "
		echo "Would You Like To Exit The Script [X] Or Return To Main Menu [M]?  "
		echo
		echo
		echo "[M]:  Exit To Main Menu  "
		echo "[X]: Exit Script..  "
		echo
		read -p "Enter Option:   "
		case $REPLY in
			M) echo "Exiting To Main Menu... ";;
			X) echo "Exiting Script... ";;
		esac
		if [[ $REPLY == M ]] || [[ $REPLY == m ]] ; then
			sudo bash p_tool
		else
			exit 0
		fi
		break

#Pull Partition scipt and run		
	elif [[ $action == p ]] ; then
		cd /etc/ptool
		sh () {
		ls /etc/ptool/ptool-part > /dev/null
		}
		if sh ; then
			sudo bash ptool-part
		else
			sudo wget https://raw.githubusercontent.com/Junior-ptool/p_tool-practical-tool/master/ptool-part
                        sudo chmod 700 /etc/ptool/ptool-part
			sudo bash ptool-part
		fi
		

#Set Up Servers		
	elif [[ $action == s ]] || [[ $action == S ]]; then
		echo "Would you like to generate a ssh keypair and scan your additional nodes to collect their keys?  "
		read -p "[Y] or [N]:  " quest
		if [[ $quest == Y ]] || [[ $quest == y ]] ; then
			echo "Enter The Hostname Or IP.  "
			read host
			ssh () {
			ls ~/.ssh > /dev/null
			}
			if ssh ; then
				echo ""
			else
				sudo mkdir ~/.ssh
				sudo mkdir ~/.ssh/known_hosts
				sudo chmod 600 ~/.ssh/known_hosts
			fi

#Copy keys from host
			sudo ssh-keyscan $host ~/.ssh/known_hosts
			sudo ssh-keygen -t rsa 
			sudo ssh-copy-id $host
			
			
		fi

#SSH Hardening
		echo "Would you like to reduce Brute Force Noise and change your SSH Port?  "
		echo 
		read -p "[Y] or [N]:   " ssh_port
		if [[ $ssh_port == Y ]] || [[ $ssh_port == y ]] ; then
			echo 
			echo "What Port Do You Want SSH To Respond To?   "
			echo
			read -p "Port Number:  " p_num
			echo
			echo Port $p_num >> /etc/ssh/sshd_config
			if [[ $? -eq 0 ]] ; then
				sudo systemctl restart sshd
				echo "SSH Port now updated. Please open a new shell and test it before closing this one."
			else
				echo "There has been an permission issue hardening your SSH. Are you root or a sudoer?  "
			fi
				
			echo 
			echo "What is the hostname for the server? "
			read -p "Pick Hostname:   " hostname
			sudo hostnamectl set-hostname $hostname
			echo 
			echo "What is your time zone? e.g Europe/London"
			read -p "Correct Syntax Needed:   " time
			sudo timedatectl set-timezone $time
			echo
			echo "Server Setup Now Complete.  "
			echo
			echo "Would You Like To Exit The Script: [X]  "
			echo "Or Go Back To The Main Menu?  [M]  "
			echo
			read -p "Enter Option:  "
				case $REPLY in
					X) echo "Exiting This Script...  ";;
					M) echo "Returning To Main Menu...  ";;
				esac
			if [[ $REPLY == X ]] || [[ $REPLY == x ]] ; then
				exit 0
				break
			else
				sudo bash p_tool
			fi
			
		else
			echo "SSH Hardening And Basic Set Up has not taken place.  "
			echo "Returning To Main Menu"
			sudo bash p_tool
		fi
		break

flag () {
swapon -s
}
declare -xf flag
#Optimise Server with swappiness and overcommit
	elif [[ $action == m ]] || [[ $action == M ]]; then
		until [[ $REPLY == x ]] || [[ $REPLY == X ]] ; do
		echo
		echo "Welcome To The Memory Optimization Tool. "
		echo
		echo "What Memory Options Would You Like To Configure Or View From Here?  "
		echo
		echo "[S]: Configure Swappiness.  "
		echo "[O]: Overcommit System Memory.  "
		echo "[M]: Configure Memore Max Msg.  "
		echo "[P]: Configure System Swap.  "
		echo "[T]: View Slab or Live Memory Usage.  "
		echo "[D]: Dmidecode.  "
		echo "[X]: Exit.  "
		echo 
		read -p "Select Option:  "
		echo
		case $REPLY in
			S) echo "Configuring Swappiness......   ";;
			O) echo "Overcommit.  ";;
			M) echo "Maxmsg Config.  ";;
			P) echo "Configure Swap.  ";;
			T) echo "View Memory Stats...  ";;
			D) echo "View Bios, Memory, Processor, etc Information.  ";;
		esac

		if [[ $REPLY == D ]] || [[ $REPLY == d ]] ; then
			until [[ $dmi == x ]] || [[ $dmi == X ]] ; do
			echo "What Information Would You Like To View?  "
			echo ""
			echo "[B]: Bios"
			echo "[M]: Memory"
			echo "[P]: Processor"
			echo "[S]: System"
			echo "[D]: Chassis"
			echo "[A]: Baseboard"
			echo "[C]: Cache"
			echo "[E]: Connector"
			echo "[F]: Slot"
			echo "[x]: Exit"
			echo ""
			read -p "Select Option:   " dmi
			case $dmi in
				A) echo "Viewing Baseboard Inofrmation.  ";;
				B) echo "Viewing Bios Information.  ";;
				C) echo "Viewing Cache Information.  ";;
				D) echo "Viewing Chassis Information.  ";;
				E) echo "Viewing Connector Information.  ";;
				F) echo "Viewing Slot Information.  ";;
				M) echo "Viewing Memory Information.  ";;
				P) echo "Viewing Processor Information.  ";;
				S) echo "Viewing System Information.  ";;
				X) echo "Now Exiting.....  ";;
			esac
			if [[ $dmi == A ]] || [[ $dmi == a ]] ; then
				sudo dmidecode --type baseboard
			elif [[ $dmi == B ]] || [[ $dmi == b ]] ; then
				sudo dmidecode --type bios
			elif [[ $dmi == C ]] || [[ $dmi == c ]]; then
				sudo dmidecode --type cache
			elif [[ $dmi == D ]] || [[ $dmi == d ]] ; then 
				sudo dmidecode --type chassis
			elif [[ $dmi == E ]] || [[ $dmi == e ]] ; then
				sudo dmidecode --type connector
			elif [[ $dmi == F ]] || [[ $dmi == f ]] ; then
				sudo dmidecode --type slot
			elif [[ $dmi == M ]] || [[ $dmi == m ]] ; then
				sudo dmidecode --type memory
			elif [[ $dmi == P ]] || [[ $dmi == p ]] ; then
				sudo dmidecode --type processor
			elif [[ $dmi == S ]] || [[ $dmi == s ]] ; then
				sudo dmidecode --type system
			elif [[ $dmi == x ]] || [[ $dmi == X ]] ; then
                                echo
                                echo "Would you like to exit to the main menu?  "
                                echo
                                read -p "[Y] or [N]:  " mm
                                case $mm in
                                        Y) echo "Yes";;
                                        N) echo "No";;
                                esac
                                if [[ $mm == Y ]] || [[ $mm == y ]] ; then
                                        sudo bash p_tool
                                else
                                        exit 0	
					break
                                fi

			fi
			done
		elif [[ $REPLY == S ]] || [[ $REPLY == s ]] ; then
			echo "What swappiness would you like to apply (Max 100)?  "
			read -p "Enter Figure:   " swap_level
			sudo sysctl vm.swappiness=$swap_level
			echo "Configuration Complete...  "
			echo
		elif [[ $REPLY == O ]] || [[ $REPLY == o ]] ; then
			echo "Would you like to overcommit memory?  "
			read -p "[Y] or [N]:  " oc
			if [[ $oc == Y ]] || [[ $oc == y ]] ; then
				echo 1 > /proc/sys/vm/overcommit_memory
			fi
			echo "Configuration Complete...  "
		elif [[ $REPLY == M ]] || [[ $REPLY == m ]] ; then
			echo "What would you like to set msgmax to? (Max: 131072) "
			read -p "Enter Figure:   "
			sudo echo $REPLY > /proc/sys/kernel/msgmax
			echo "Configuration Complete... "
			sudo bash p_tool
		elif [[ $REPLY == P ]] || [[ $REPLY == p ]] ; then
			echo
			echo "Would you like to create swap?  "
			read -p "[Y] [N]:  " fal_swap
			flag2 () {
			swapon $swap
			}
			declare -xf flag2

	#Create swap if wanted.
			if [[ $fal_swap == Y ]] || [[ $fal_swap == y ]] ; then
				echo
				echo "What size would you like your swap to be in MB or GB?  "
				echo
				read -p "Enter Figure:  " swap_size
				echo
				echo "Creating swap"
				echo
				swap=/etc/ptool/swap.disk
				sudo fallocate -l $swap_size $swap
				sudo chmod 600 $swap
				sudo mkswap $swap
				su -c flag2 
				su -c flag 
				echo
				free -h
				echo "Swap Successfully Created.  "
				echo
				echo "$swap	none	ext4	swap	defaults	0	0" >> /etc/fstab
				sudo bash p_tool
			
			else
				echo
				echo "No Swap Will Be Added"
				echo "WOuld you like to exit this script?  "
				read -p "[Y] or [N]:   " leave
				case $leave in
					Y) echo "Exiting Script....   ";;
					N) echo "Return To Main Menu.... ";;
				esac
				if [[ $leave == Y ]] || [[ $leave == y ]] ; then
					exit 0
					break
				else	
					sudo bash p_tool
				fi
			fi
			break
		   
		elif [[ $REPLY == T ]] || [[ $REPLY == t ]] ; then
			echo "Which Memory Stats Would You Like To View?  "
			echo
			echo "[S]: Memory Slab  "
			echo "[T]: Live Memory, CPU and IO Statistics  "
			echo "[I]: Memory Information  "
			echo "[A]: Available Memory  "
			echo "[X]: Exit To Main Menu  "
			echo
			read -p "Please select a letter:  " sel
		
			case $sel in
				S) echo "Viewing Slabtop.  ";;
				T) echo "Viewing htop or top.  ";;
				I) echo "Viewing Meminfo.  ";;
				A) echo "Viewing free and vmstat.  ";;
				X) echo "Exiting.. ";;
			esac
			if [[ $sel == S ]] || [[ $sel == s ]] ; then
				sudo slabtop
			elif [[ $sel == T ]] || [[ $sel == t ]] ; then
				sudo htop || sudo top
			elif [[ $sel = I ]] || [[ $sel == i ]] ; then
				sudo cat /proc/meminfo
			elif [[ $sel == A ]] || [[ $sel == a ]] ; then
				sudo free -h && sudo vmstat
			else	
				sudo bash p_tool
			fi
		elif [[ $REPLY == x ]] || [[ $REPLY == X ]] ; then
			echo "Would you like to return to the main menu?  "
			read -p "[Y] [N]:   " leave
			if [[ $leave == Y ]] || [[ $leave == y ]] ; then
				sudo bash p_tool
			else
				exit 0
				break
			fi
			
		fi
	 	done
#Add User And Password; Manage Permissions
	elif [[ $action == a ]] || [[ $action == A ]]; then
		while [[ 0 != 1 ]] ; do
			echo
			echo "What would you like to do with this tool?  "
			echo
			echo "[1]: Add New User:  "
			echo "[2]: Manage Permissions:  "
			echo
			read -p "Chosen Option:   " job
			case $job in
				1) echo "Add New System User:   ";;
				2) echo "Edit Generic Permissions -rwx:   ";;
			esac
			add () {
			sudo grep -e "^$user" /etc/passwd
			}
			if [[ $job == 1 ]] ; then
				while true ; do
					echo
					echo "What is the name of the user you would like to add?  "
					echo
					read -p "Username:   " user
					"add" > /dev/null

					#Check if user exist
					if "add" ; then
						echo "Username $user Already Exists! Please try again.  "
					else

						echo
						echo "Please enter the new users password.  "
						echo
						read -s -p "Enter Password:   " password
						pass=$(perl -e 'print crypt($ARGV[0], "password")' $password)
						sudo useradd -m -p "$pass" "$user"

						if [[ $? -eq 0 ]] ; then
							echo "User $user Has Been Successfully Added.  "
							break
						else
							echo "Failed To Add User.  "
						fi
						sudo bash p_tool
					fi
				break
				done
			elif [[ $job == 2 ]] ; then
				echo
				echo "What is the absolute path of the file you would like to edit the permission for?  "
				echo
				read -p "/path/to/file:  " f_path
				echo
				path () {
				sudo getfacl "$f_path"
				}
				echo "The Permission For This File/Directory currently looks likes:  "
				path
				echo
				echo "$(tput setaf 3)Change Individual Permissions$(tput sgr 0)" 
				echo "$(tput setaf 5)Select A Common Permission Set$(tput sgr 0)  "
				echo "Or" 
				echo "$(tput setaf 1)Go Back To Main Menu$(tput sgr 0)  "
				echo
				echo
				echo "$(tput setaf 3)[U]: User$(tput sgr 0)   "
				echo "$(tput setaf 3)[G]: Group$(tput sgr 0)   "
				echo "$(tput setaf 3)[O]: Other$(tput sgr 0)   "
				echo "$(tput setaf 5)[700]: rwx------$(tput sgr 0)   "
				echo "$(tput setaf 5)[600]: rw-------$(tput sgr 0)   "
				echo "$(tput setaf 5)[644]: rw-r--r--$(tput sgr 0)   " 
				echo "$(tput setaf 1)[X]: Exit$(tput sgr 0)  "
				echo 
				while true ; do
					read -p "Enter Option:  " perm
					case $perm in
						U) echo "Edit Owners Permission. Which Permission would you like to add or remove?  ";;
						u) echo "Edit Owners Permission. Which Permission would you like to add or remove?  ";;
						G) echo "Edit Group Permission. Which permission would you like to add or remove?  ";;
						g) echo "Edit Group Permission. Which permission would you like to add or remove?  ";;
						O) echo "Edit Others Permission. Which permission would you like to add or remove?  ";;
						o) echo "Edit Others Permission. Which permission would you like to add or remove?  ";;
						700) echo "Applying Changes...  ";;
						600) echo "Applying Changes...  ";;
						644) echo "Applying Changes...  ";;
						X) echo "Exiting To Main Menu...   ";;
					esac
					if [[ $perm == U ]] || [[ $perm == u ]] ; then
						echo
						echo "[1]: Add Read "
						echo "[2]: Add Write "
						echo "[3]: Add Execute "
						echo "[4]: Remove Read "
                                                echo "[5]: Remove Write "
                                                echo "[6]: Remove Execute "
						echo
						read -p "Selected Num:  " num
						case $num in
							1) echo "Adding Read Permission For Owner.  ";;
							2) echo "Adding Write Permission For Owner.  ";;
							3) echo "Adding Execute Permission For Owner.  ";;
							4) echo "Removing Read Permission For Owner.  ";;
                                                        5) echo "Removing Write Permission For Owner.  ";;
                                                        6) echo "Removing Execute Permission For Owner.  ";;
						esac
						if [[ $num == 1 ]] ; then
							sudo chmod u+r $f_path
							getfacl $f_path
						elif [[ $num == 2 ]] ; then 
							sudo chmod u+w $f_path
							getfacl $f_path
						elif [[ $num == 3 ]] ; then
							sudo chmod u+x $f_path
							getfacl $f_path
						elif [[ $num == 4 ]] ; then
                                                        sudo chmod u-r $f_path
							getfacl $f_path
                                                elif [[ $num == 5 ]] ; then
                                                        sudo chmod u-w $f_path
							getfacl $f_path
                                                elif [[ $num == 6 ]] ; then
                                                        sudo chmod u-x $f_path
							getfacl $f_path
						fi
						break
					elif [[ $perm == G ]] || [[ $perm == g ]] ; then
						echo
                                                echo "[1]: Add Read "
                                                echo "[2]: Add Write "
                                                echo "[3]: Add Execute "
                                                echo "[4]: Remove Read "
                                                echo "[5]: Remove Write "
                                                echo "[6]: Remove Execute "
                                                echo
                                                read -p "Selected Num:  " num
                                                case $num in
                                                        1) echo "Adding Read Permission For Group.  ";;
                                                        2) echo "Adding Write Permission For Group.  ";;
                                                        3) echo "Adding Execute Permission For Group.  ";;
                                                        4) echo "Removing Read Permission For Group.  ";;
                                                        5) echo "Removing Write Permission For Group.  ";;
                                                        6) echo "Removing Execute Permission For Group.  ";;
                                                esac
                                                if [[ $num == 1 ]] ; then
                                                        sudo chmod g+r $f_path
							getfacl $f_path
                                                elif [[ $num == 2 ]] ; then
                                                        sudo chmod g+w $f_path
							getfacl $f_path
                                                elif [[ $num == 3 ]] ; then
                                                        sudo chmod g+x $f_path
							getfacl $f_path
                                                elif [[ $num == 4 ]] ; then
                                                        sudo chmod g-r $f_path
							getfacl $f_path
                                                elif [[ $num == 5 ]] ; then
                                                        sudo chmod g-w $f_path
							getfacl $f_path
                                                elif [[ $num == 6 ]] ; then
                                                        sudo chmod g-x $f_path
							getfacl $f_path
						fi
						break
					elif [[ $perm == O ]] || [[ $perm == o ]] ; then
                                                echo
                                                echo "[1]: Add Read "
                                                echo "[2]: Add Write "
                                                echo "[3]: Add Execute "
                                                echo "[4]: Remove Read "
                                                echo "[5]: Remove Write "
                                                echo "[6]: Remove Execute "
                                                echo
                                                read -p "Selected Num:  " num
                                                case $num in
                                                        1) echo "Adding Read Permission For Others.  ";;
                                                        2) echo "Adding Write Permission For Others.  ";;
                                                        3) echo "Adding Execute Permission For Others.  ";;
                                                        4) echo "Removing Read Permission For Others.  ";;
                                                        5) echo "Removing Write Permission For Others.  ";;
                                                        6) echo "Removing Execute Permission For Others.  ";;
                                                esac
                                                if [[ $num == 1 ]] ; then
                                                        sudo chmod o+r $f_path
							getfacl $f_path
                                                elif [[ $num == 2 ]] ; then
                                                        sudo chmod o+w $f_path
							getfacl $f_path
                                                elif [[ $num == 3 ]] ; then
                                                        sudo chmod o+x $f_path
							getfacl $f_path
                                                elif [[ $num == 4 ]] ; then
                                                        sudo chmod o-r $f_path
							getfacl $f_path
                                                elif [[ $num == 5 ]] ; then
                                                        sudo chmod o-w $f_path
							getfacl $f_path
                                                elif [[ $num == 6 ]] ; then
                                                        sudo chmod o-x $f_path
							getfacl $f_path
                                                fi
						break
					elif [[ $perm -eq 700 ]] ; then
						sudo chmod 700 $f_path
						getfacl $f_path
					elif [[ $perm -eq 600 ]] ; then
						sudo chmod 600 $f_path
						getfacl $f_path
					elif [[ $perm -eq 644 ]] ; then
						sudo chmod 644 $f_path
						getfacl $f_path
					else
						bash p_tool
					fi
					break
				done
				break
			fi					
		done
		break			

#Exit Script
	elif [[ $action == x ]] || [[ $action == X ]] ; then
		exit 0
		break
	fi
	break
done 
